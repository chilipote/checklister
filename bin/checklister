#!/usr/bin/env ruby
require "gli"
require "checklister"

include GLI::App

ISSUE_SERVICES = { "1" => "gitlab", "2" => "github" }.freeze

program_desc "gives you the power to transform any markdown file or url checklist into an actionable gitlab and github issue."

version Checklister::VERSION
subcommand_option_handling :normal
arguments :strict
sort_help :manually

# Flags
flag [:c,:config], default_value: File.join(ENV["HOME"],".checklister.yml"),
                   desc: "Set the saved configuration path"

flag [:s,:service], must_match: ISSUE_SERVICES.values
flag [:h,:host], desc: "Set the issue service host"
flag [:u,:username], desc: "Set your username to access the issue service"
flag [:t,:token], desc: "Set your token to access the issue service"

pre do |global_options,command,options,args|
  Checklister.configure(global_options)
end

desc "Show current configuration settings"
command :settings do |c|
  c.action do |global_options,options,args|
    puts "---------------------"
    Checklister.config.to_stdout
    puts "---------------------"
  end
end

desc "Save your gitlab or github settings for later"
command :setup do |c|
  c.action do |global_options,options,args|
    data = {}

    if options[:service]
      service_selected = options[:service]
    else
      puts "* Which Issue Service would you like to setup?"
      ISSUE_SERVICES.each do |index, service|
        puts "[#{index}] #{service}"
      end
      choice = STDIN.gets.to_i
      service_selected = ISSUE_SERVICES[choice.to_s]
    end

    puts ""
    puts "* We are going to help you set up: #{service_selected}"

    if service_selected == "gitlab"
      puts ""
      puts "** What is your gitlab host? (Ex: gitlab.com)"
      choice = STDIN.gets.chomp
      data["host"] = choice
    elsif service_selected == "github"
      data["host"] = "github.com"
    end

    puts ""
    puts "** What is your username at the #{service_selected} service?"
    choice = STDIN.gets.chomp
    data["username"] = choice

    puts ""
    puts "** What is your token with the #{service_selected} service?"
    choice = STDIN.gets.chomp
    data["token"] = choice

    puts "Your configuration data is #{data}"
    puts ""
    puts "Your configuration data has been saved at #{global_options[:config]}"
  end
end

desc "Describe create here"
arg_name "Describe arguments to create here"
command :create do |c|
  c.action do |global_options,options,args|
    puts "create command ran"
  end
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
